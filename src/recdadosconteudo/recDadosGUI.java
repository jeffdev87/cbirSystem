/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RecDadosUI.java
 *
 * Created on 14/08/2010, 13:31:14
 */
package recdadosconteudo;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

class FiltroJPGePNG implements FilenameFilter {

    public boolean accept(File dir, String name) {
        return (name.endsWith(".dcm") || name.endsWith(".png") || name.endsWith(".jpg"));
    }
}

class CustomFilterImages extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".jpg" extension
        return (file.isDirectory() ||
                file.getAbsolutePath().endsWith(".dcm") ||
                file.getAbsolutePath().endsWith(".png") ||
                file.getAbsolutePath().endsWith(".jpg"));
    }

    @Override
    public String getDescription() {
        return "Images (*.png, *.jpg, *.dcm)";
    }
}

/**
 *
 * @author William
 */
public class recDadosGUI extends javax.swing.JFrame {

    public final static String SEP_SIMB = "\\";
    
    ProcImages queryImg = null, resultImageRef = null;

    GeradorArquivoSaida histFile = null, descrFile = null;

    Set arqHistSet, arqDescrSet, classesSet;

    String path = "", descrFileName, histFileName, nImgsResp;

    Vector<String> resultSet = new Vector<String>();

    /** Creates new form RecDadosUI */
    public recDadosGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserFrame = new javax.swing.JFrame();
        fileChooser = new javax.swing.JFileChooser();
        frameResp = new javax.swing.JFrame();
        panelPrincFrameResp = new javax.swing.JPanel();
        scrollPaneImgResp = new javax.swing.JScrollPane();
        resultSetList = new javax.swing.JList();
        tabbedPaneVisImgRef1 = new javax.swing.JTabbedPane();
        scrollPanelImg1 = new javax.swing.JScrollPane();
        labelImage1 = new javax.swing.JLabel();
        scrollPanelHist1 = new javax.swing.JScrollPane();
        labelHist1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        grupoOptExtrator = new javax.swing.ButtonGroup();
        grupoDist = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listImages = new javax.swing.JList();
        tabbedPaneVisImgRef = new javax.swing.JTabbedPane();
        scrollPanelImg = new javax.swing.JScrollPane();
        labelImage = new javax.swing.JLabel();
        scrollPanelHist = new javax.swing.JScrollPane();
        labelHist = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        panelOpExtrator = new javax.swing.JPanel();
        opHist = new javax.swing.JRadioButton();
        opDescr = new javax.swing.JRadioButton();
        panelOpDist = new javax.swing.JPanel();
        opDistEucl = new javax.swing.JRadioButton();
        opDistManhatan = new javax.swing.JRadioButton();
        panelOpNProx = new javax.swing.JPanel();
        txtNImgResp = new javax.swing.JTextField();
        labelNProx = new javax.swing.JLabel();
        btBuscar = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        mainMenuBar = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        menuAbrirImg = new javax.swing.JMenuItem();
        menuCaract = new javax.swing.JMenu();
        menuExtratCarac = new javax.swing.JMenuItem();
        menuGerArqWekaHaralick = new javax.swing.JMenuItem();
        menuGerArqWekaRGBHist = new javax.swing.JMenuItem();
        menuGerArqWekaRGBMoment = new javax.swing.JMenuItem();

        fileChooserFrame.setTitle("Selecionar Imagem");
        fileChooserFrame.setMinimumSize(new java.awt.Dimension(600, 450));
        fileChooserFrame.setName("fileChooserFrameName"); // NOI18N
        fileChooserFrame.setResizable(false);

        fileChooser.setFileFilter(new CustomFilterImages());
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setCurrentDirectory(new File("."));
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileChooserFrameLayout = new javax.swing.GroupLayout(fileChooserFrame.getContentPane());
        fileChooserFrame.getContentPane().setLayout(fileChooserFrameLayout);
        fileChooserFrameLayout.setHorizontalGroup(
            fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserFrameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        fileChooserFrameLayout.setVerticalGroup(
            fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 397, Short.MAX_VALUE)
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserFrameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        frameResp.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        frameResp.setTitle("Retorno da Busca");
        frameResp.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        frameResp.setMinimumSize(new java.awt.Dimension(620, 453));
        frameResp.setResizable(false);

        panelPrincFrameResp.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagens Retornadas"));

        resultSetList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultSetListMouseClicked(evt);
            }
        });
        scrollPaneImgResp.setViewportView(resultSetList);

        tabbedPaneVisImgRef1.setBorder(javax.swing.BorderFactory.createTitledBorder("Visualizador"));

        labelImage1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelImage1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scrollPanelImg1.setViewportView(labelImage1);

        tabbedPaneVisImgRef1.addTab("Imagem", scrollPanelImg1);

        labelHist1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scrollPanelHist1.setViewportView(labelHist1);

        tabbedPaneVisImgRef1.addTab("Histograma", scrollPanelHist1);

        javax.swing.GroupLayout panelPrincFrameRespLayout = new javax.swing.GroupLayout(panelPrincFrameResp);
        panelPrincFrameResp.setLayout(panelPrincFrameRespLayout);
        panelPrincFrameRespLayout.setHorizontalGroup(
            panelPrincFrameRespLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincFrameRespLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneImgResp, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPaneVisImgRef1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelPrincFrameRespLayout.setVerticalGroup(
            panelPrincFrameRespLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincFrameRespLayout.createSequentialGroup()
                .addGroup(panelPrincFrameRespLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tabbedPaneVisImgRef1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addComponent(scrollPaneImgResp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameRespLayout = new javax.swing.GroupLayout(frameResp.getContentPane());
        frameResp.getContentPane().setLayout(frameRespLayout);
        frameRespLayout.setHorizontalGroup(
            frameRespLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameRespLayout.createSequentialGroup()
                .addContainerGap(503, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(frameRespLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(frameRespLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelPrincFrameResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );
        frameRespLayout.setVerticalGroup(
            frameRespLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frameRespLayout.createSequentialGroup()
                .addContainerGap(418, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(frameRespLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(frameRespLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelPrincFrameResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(50, Short.MAX_VALUE)))
        );

        grupoOptExtrator.add(opHist);
        grupoOptExtrator.add(opDescr);

        grupoDist.add(opDistEucl);
        grupoDist.add(opDistManhatan);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Recuperação de Dados Por Conteúdo");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Banco de Imagens"));

        listImages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listImagesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listImages);

        tabbedPaneVisImgRef.setBorder(javax.swing.BorderFactory.createTitledBorder("Visualizador"));

        labelImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scrollPanelImg.setViewportView(labelImage);

        tabbedPaneVisImgRef.addTab("Imagem", scrollPanelImg);

        labelHist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scrollPanelHist.setViewportView(labelHist);

        tabbedPaneVisImgRef.addTab("Histograma", scrollPanelHist);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPaneVisImgRef, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPaneVisImgRef)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Propriedades da Busca"));

        panelOpExtrator.setBorder(javax.swing.BorderFactory.createTitledBorder("Descritores"));

        opHist.setText("Histograma");
        opHist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opHistActionPerformed(evt);
            }
        });

        opDescr.setText("Descritores");
        opDescr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opDescrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOpExtratorLayout = new javax.swing.GroupLayout(panelOpExtrator);
        panelOpExtrator.setLayout(panelOpExtratorLayout);
        panelOpExtratorLayout.setHorizontalGroup(
            panelOpExtratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpExtratorLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelOpExtratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opHist)
                    .addComponent(opDescr))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelOpExtratorLayout.setVerticalGroup(
            panelOpExtratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpExtratorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(opHist)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opDescr)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        panelOpDist.setBorder(javax.swing.BorderFactory.createTitledBorder("Distâncias"));

        opDistEucl.setText("Euclidiana");
        opDistEucl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opDistEuclActionPerformed(evt);
            }
        });

        opDistManhatan.setText("Manhatan");

        javax.swing.GroupLayout panelOpDistLayout = new javax.swing.GroupLayout(panelOpDist);
        panelOpDist.setLayout(panelOpDistLayout);
        panelOpDistLayout.setHorizontalGroup(
            panelOpDistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpDistLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panelOpDistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opDistEucl)
                    .addComponent(opDistManhatan))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelOpDistLayout.setVerticalGroup(
            panelOpDistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpDistLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(opDistEucl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opDistManhatan)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        panelOpNProx.setBorder(javax.swing.BorderFactory.createTitledBorder("Número (N) de Imagens de Resposta"));

        labelNProx.setText("Valor de N:");

        javax.swing.GroupLayout panelOpNProxLayout = new javax.swing.GroupLayout(panelOpNProx);
        panelOpNProx.setLayout(panelOpNProxLayout);
        panelOpNProxLayout.setHorizontalGroup(
            panelOpNProxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOpNProxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelNProx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNImgResp, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        panelOpNProxLayout.setVerticalGroup(
            panelOpNProxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpNProxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOpNProxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNProx)
                    .addComponent(txtNImgResp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        btBuscar.setText("Buscar");
        btBuscar.setEnabled(false);
        btBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btBuscarMouseClicked(evt);
            }
        });
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(panelOpDist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelOpNProx, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelOpExtrator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(panelOpExtrator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelOpDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelOpNProx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btBuscar))
        );

        btCancel.setText("Sair");
        btCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCancelMouseClicked(evt);
            }
        });
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        mainMenuBar.setName("menuBarMainFrame"); // NOI18N

        menuArquivo.setText("Arquivo");
        menuArquivo.setName("menuArquivo"); // NOI18N

        menuAbrirImg.setText("Carregar imagens");
        menuAbrirImg.setName("menuArquivoAbrir"); // NOI18N
        menuAbrirImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirImgActionPerformed(evt);
            }
        });
        menuArquivo.add(menuAbrirImg);

        mainMenuBar.add(menuArquivo);

        menuCaract.setText("Características");

        menuExtratCarac.setText("Extrair Características");
        menuExtratCarac.setEnabled(false);
        menuExtratCarac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExtratCaracActionPerformed(evt);
            }
        });
        menuCaract.add(menuExtratCarac);

        menuGerArqWekaHaralick.setText("Gerar arquivo Weka (Cinza) - Haralick");
        menuGerArqWekaHaralick.setEnabled(false);
        menuGerArqWekaHaralick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGerArqWekaHaralickActionPerformed(evt);
            }
        });
        menuCaract.add(menuGerArqWekaHaralick);

        menuGerArqWekaRGBHist.setText("Gerar arquivo Weka (RGB) - Histograma");
        menuGerArqWekaRGBHist.setEnabled(false);
        menuGerArqWekaRGBHist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGerArqWekaRGBHistActionPerformed(evt);
            }
        });
        menuCaract.add(menuGerArqWekaRGBHist);

        menuGerArqWekaRGBMoment.setText("Gerar arquivo Weka (RGB) - Momentos");
        menuGerArqWekaRGBMoment.setEnabled(false);
        menuGerArqWekaRGBMoment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGerArqWekaRGBMomentActionPerformed(evt);
            }
        });
        menuCaract.add(menuGerArqWekaRGBMoment);

        mainMenuBar.add(menuCaract);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btCancel))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listarArquivos() {

        if (!path.equals("")) {
            try {
                File arq = new File(path);

                File[] arquivos = arq.listFiles(new FiltroJPGePNG());

                @SuppressWarnings("UseOfObsoleteCollectionType")
                Vector<String> nomeArqVet = new Vector<String>();
                
                classesSet = new HashSet();
                for (int i = 0; i < arquivos.length; i++) {
                    String s = arquivos[i].getName();
                    
                    int indexOfUnderS = s.indexOf("_");    
                    
                    if (indexOfUnderS == -1)
                        classesSet.add(s);
                    else
                        classesSet.add(s.substring(0, indexOfUnderS));
                    
                    nomeArqVet.add(s);
                }

                listImages.setListData(nomeArqVet);
            
                if (listImages.getModel().getSize() > 0) {
                    listImages.setSelectedIndex(0);
                    menuExtratCarac.setEnabled(true);
                    btBuscar.setEnabled(true);
                    
                    String pathCompleto = path + SEP_SIMB + listImages.getSelectedValue();
                    setQueryImage (pathCompleto);
                } else {
                    menuExtratCarac.setEnabled(false);
                    menuGerArqWekaHaralick.setEnabled(false);
                    menuGerArqWekaRGBHist.setEnabled(false);
                    menuGerArqWekaRGBMoment.setEnabled(false);
                    btBuscar.setEnabled(false);
                }

            } catch (NullPointerException ex) {
                listImages.removeAll();
                System.out.println("cu" + ex.getMessage());
            } catch (Exception ex2) {
                listImages.removeAll();
                System.out.println("cuzao" + ex2.getMessage());
            }
        }
    }

    private void menuAbrirImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirImgActionPerformed
        int returnChooseFile = fileChooser.showOpenDialog(this);

        if (returnChooseFile == JFileChooser.APPROVE_OPTION) {

            path = fileChooser.getSelectedFile().getPath();

            histFileName = fileChooser.getSelectedFile().getName() + "Hist.txt";
            descrFileName = fileChooser.getSelectedFile().getName() + "Descr.txt";

            histFile = new GeradorArquivoSaida(histFileName);
            histFile.criaArquivo();

            descrFile = new GeradorArquivoSaida(descrFileName);
            descrFile.criaArquivo();

            //Le os registros ja armazenados para evitar recalculos
            OutputFileManager lerArq = new OutputFileManager(histFileName);
            lerArq.openFile();
            arqHistSet = lerArq.lerTodosNomesDeRegistros();
            lerArq.closeFile();

            lerArq = new OutputFileManager(descrFileName);
            lerArq.openFile();
            arqDescrSet = lerArq.lerTodosNomesDeRegistros();
            lerArq.closeFile();

            queryImg = null;

            labelImage.setIcon(null);
            labelImage.validate();

            labelHist.setIcon(null);
            labelHist.validate();
            
            listarArquivos();            
        } else {
            path = "";
            btBuscar.setEnabled(false);
            System.out.println("File access cancelled by user.");
        }
        
        fileChooserFrame.dispose();
    }//GEN-LAST:event_menuAbrirImgActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
    }//GEN-LAST:event_fileChooserActionPerformed

    private void menuExtratCaracActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExtratCaracActionPerformed

        int numElemList = listImages.getModel().getSize();
                
        for (int i = 0; i < numElemList; i++) {
            String nomeArq = (String) listImages.getModel().getElementAt(i);
            String pathCompleto = path + SEP_SIMB + nomeArq;
            
            ManipuladorImagem imgHandler = null;
            try {
                imgHandler = new ManipuladorImagem(pathCompleto);
            } catch (IOException ex) {
                System.err.println(ex.getMessage());
            }
            
            ProcImages procImgLocal = ProcImagesFactory.procImageFactoryMethod(imgHandler);
            
            if (!arqHistSet.contains(nomeArq)) {
                if (procImgLocal.calcHistograma()) {
                    histFile.adicionaRegistro(nomeArq + ":" +
                                            procImgLocal.getHistogramaString());
                    arqHistSet.add(nomeArq);
                } else {
                    System.err.println("Erro: Histograma não calculado!");
                }
            } else {
                System.out.println("Ja existe um histograma para " + nomeArq +
                                   " calculado!");
            }

            if (!arqDescrSet.contains(nomeArq)) {
                if (procImgLocal.calcCaracteristicas()) {
                    descrFile.adicionaRegistro(nomeArq + ":" +
                                            procImgLocal.getVetCaractString());
                    arqDescrSet.add(nomeArq);
                } else {
                    System.err.println("Erro: Vetor de características não "
                                       + "calculado!");
                }
            } else {
                System.out.println("Ja existe um vetor de características para "
                                   + nomeArq + " calculado!");
            }
        }

        JOptionPane.showMessageDialog(null,
                              "Características extraídas com sucesso.",
                              "Operação finalizada",
                              JOptionPane.INFORMATION_MESSAGE);

        histFile.fechaArquivo();
        descrFile.fechaArquivo();            
    }//GEN-LAST:event_menuExtratCaracActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (histFile != null)
            histFile.fechaArquivo();
        if (descrFile != null)
            descrFile.fechaArquivo();
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    }//GEN-LAST:event_formWindowOpened

    private Vector<EstruturaDist> execConsulta (ProcImages queryImg,
                                                TiposDescritores descrCode,
                                                TiposDist distCode) {

        if (queryImg == null || descrCode == null || distCode == null)
            return null;
        
        OutputFileManager lerArq = null;
        Vector<EstruturaDist> resultVec = null;

        switch (descrCode) {
            case HISTOGRAM:
                lerArq = new OutputFileManager(histFileName);

                lerArq.openFile();

                if (lerArq.arquivoCriado() &&
                    !lerArq.arquivoVazio()) {
                    
                    resultVec = lerArq.calcDistancias(queryImg.getHistograma(),
                                                      queryImg.getImageName(),
                                                      distCode);
                    lerArq.closeFile();
                } else {
                    System.err.println("Erro (hist): Características não extraídas.");
                }
                break;

            case HARALICK:
                lerArq = new OutputFileManager(descrFileName);
                
                lerArq.openFile();
                if (lerArq.arquivoCriado() &&
                    !lerArq.arquivoVazio()) {

                    resultVec = lerArq.calcDistancias(queryImg.
                                                        getVetCaracteristicas(),
                                                      queryImg.getImageName(),
                                                      distCode);
                    lerArq.closeFile();
                } else {
                    System.err.println("Erro (hara): Características não extraídas.");
                }
                break;

            default:
                break;
        }

        return resultVec;
    }

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed

        @SuppressWarnings("UseOfObsoleteCollectionType")
        Vector<EstruturaDist> vetDist = new Vector<EstruturaDist>();

        if (queryImg == null) {
            JOptionPane.showMessageDialog(null,
                                          "Selecione uma imagem para a busca",
                                          "Erro de validação",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((histFileName == null) || (descrFileName == null)) {
            JOptionPane.showMessageDialog(null,
                                          "Abra uma base de imagens válida",
                                          "Erro de validação",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        TiposDescritores descrCode = null;
        if (grupoOptExtrator.isSelected(opHist.getModel())) {
            descrCode = TiposDescritores.HISTOGRAM;
        }else if (grupoOptExtrator.isSelected(opDescr.getModel())) {
            descrCode = TiposDescritores.HARALICK;
        }else {
            JOptionPane.showMessageDialog(null,
                                          "Selecione um descritor",
                                          "Erro de validação",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }

        TiposDist distCode = null;

        if (grupoDist.isSelected(opDistEucl.getModel())) {
            distCode = TiposDist.EUCLIDIAN;
        }else if (grupoDist.isSelected(opDistManhatan.getModel())) {
            distCode = TiposDist.MANHATAN;        
        } else {
            JOptionPane.showMessageDialog(null,
                                          "Selecione uma distância",
                                          "Erro de validação",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if ((nImgsResp = txtNImgResp.getText()).equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Digite o número de imagens de resposta",
                    "Erro de validação",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        vetDist = execConsulta (queryImg, descrCode, distCode);

        if (vetDist != null && !vetDist.isEmpty()) {
            Collections.sort(vetDist, new Compara());

            Vector<String> imgNameResultSet = new Vector<String>();

            int nImgs = Integer.parseInt(nImgsResp);

            if (nImgs > vetDist.size())
                nImgs = vetDist.size();

            for (int i = 0; i < nImgs; i++)
                imgNameResultSet.add(vetDist.elementAt(i).imageNameBase);
            
            resultSet = imgNameResultSet;
            resultSetList.setListData(imgNameResultSet);
            
            frameResp.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null,
                                          "Erro ao realizar a consulta.",
                                          "Erro de consulta",
                                          JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btBuscarActionPerformed

    private void opHistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opHistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opHistActionPerformed

    private void opDistEuclActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opDistEuclActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opDistEuclActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btCancelActionPerformed

    private void setQueryImage (String pathCompleto) {
        ManipuladorImagem imgHandler = null;
        try {
            imgHandler = new ManipuladorImagem(pathCompleto);
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }

        queryImg = ProcImagesFactory.procImageFactoryMethod(imgHandler);        
        
        int imgType = queryImg.getImage().getType();
        if (imgType == BufferedImage.TYPE_USHORT_GRAY ||
            imgType == BufferedImage.TYPE_BYTE_GRAY) {    
            opDescr.setText("Descritores - Haralick");
            menuGerArqWekaHaralick.setEnabled(true);
            menuGerArqWekaRGBHist.setEnabled(false);
            menuGerArqWekaRGBMoment.setEnabled(false);
        }
        else {
            opDescr.setText("Descritores - Momentos");   
            menuGerArqWekaHaralick.setEnabled(false);
            menuGerArqWekaRGBHist.setEnabled(true);
            menuGerArqWekaRGBMoment.setEnabled(true);            
        }
    }
    
    private void listImagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listImagesMouseClicked
        if ((path.equals("")) || (listImages.getModel().getSize() == 0)) {
            return;
        }
        
        String pathCompleto = path + SEP_SIMB + listImages.getSelectedValue();
        
        setQueryImage(pathCompleto);
        
        ImageIcon im = new ImageIcon(pathCompleto);

        ImageIcon novaImagem = new ImageIcon(
                im.getImage().getScaledInstance(350, 280, Image.SCALE_DEFAULT));

        labelImage.setIcon(novaImagem);
        labelImage.validate();

        if (queryImg.calcHistograma()) {
            HistogramChart h = new HistogramChart(queryImg.getHistograma(), queryImg.getHistDim());
            ImageIcon im2 = new ImageIcon(h.gerarHistPNG());
            labelHist.setIcon(im2);
            labelHist.validate();
        } else {
            labelHist.setIcon(null);
            labelHist.validate();
            System.err.println("Erro (QueryImg): Histograma não calculado.");
        }

        if (!queryImg.calcCaracteristicas())
            System.err.println("Erro (QueryImg): Vetor de características não calculado.");
    }//GEN-LAST:event_listImagesMouseClicked

    private void resultSetListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultSetListMouseClicked
        if (path.equals("") || (resultSetList.getModel().getSize() == 0)) {
            return;
        }

        String pathCompleto = path + SEP_SIMB + resultSetList.getSelectedValue();        

        ManipuladorImagem imgHandler = null;
        try {
            imgHandler = new ManipuladorImagem(pathCompleto);
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }

        resultImageRef = ProcImagesFactory.procImageFactoryMethod(imgHandler);        

        ImageIcon im3 = new ImageIcon(pathCompleto);
        labelImage1.setIcon(im3);

        ImageIcon novaImagem2 = null;
        novaImagem2 = new ImageIcon(
                im3.getImage().getScaledInstance(240, 240, Image.SCALE_DEFAULT));

        labelImage1.setIcon(novaImagem2);
        labelImage1.validate();

        if (resultImageRef.calcHistograma()) {
            HistogramChart h = new HistogramChart(resultImageRef.getHistograma(), 
                                                  resultImageRef.getHistDim());
            ImageIcon im2 = new ImageIcon(h.gerarHistPNG());
            labelHist1.setIcon(im2);
            labelHist1.validate();
        } else {
            labelHist1.setIcon(null);
            labelHist1.validate();
            System.err.println("Erro (ResultImg): Histograma não calculado.");
        }
    }//GEN-LAST:event_resultSetListMouseClicked

    private void btBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btBuscarMouseClicked
    }//GEN-LAST:event_btBuscarMouseClicked

    private void opDescrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opDescrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opDescrActionPerformed

    private void btCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCancelMouseClicked
        txtNImgResp.setText("");
        grupoDist.clearSelection();
        grupoOptExtrator.clearSelection();
    }//GEN-LAST:event_btCancelMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        labelImage1.setIcon(null);
        frameResp.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private String getWekaClasses () {
        String classes = "@ATTRIBUTE class {";
        int size = 0;

        for (Iterator<String> it = classesSet.iterator(); it.hasNext();) {
            if (size == classesSet.size() - 1)
                classes+=it.next() + "}\n";
            else
                classes+=it.next() + ", ";
            size++;
        }
        return classes;
    }

    private void getWekaFile (int descrType) {
        String aux;

        switch (descrType) {
            case (ProcImages.TYPE_DESC_HARA):
                aux = "_hara_";
                break;
            case (ProcImages.TYPE_DESC_HIST):
                aux = "_hist_";
                break;
            case (ProcImages.TYPE_DESC_MOMEN):
                aux = "_mom_";
                break;                
            default:
                aux = "";
                break;
        }
        
        int index = descrFileName.indexOf('.');            
        String wekaFileName = descrFileName.substring(0, index) + aux + "weka.arff";
        
        OutputFileManager wekaOut = new OutputFileManager(wekaFileName);
        wekaOut.openFile();
        
        if (!wekaOut.arquivoCriado()) {
            GeradorArquivoSaida wekaFile = new GeradorArquivoSaida(wekaFileName);
            wekaFile.criaArquivo();
            
            wekaFile.adicionaRegistro(ProcImages.getWekaHeader(descrFileName, descrType));
            wekaFile.adicionaRegistro(getWekaClasses());
            wekaFile.adicionaRegistro("@DATA\n");

            int numElemList = listImages.getModel().getSize();

            for (int i = 0; i < numElemList; i++) {
                String nomeArq = (String) listImages.getModel().getElementAt(i);
                String pathCompleto = path + SEP_SIMB + nomeArq;

                ManipuladorImagem imgHandler = null;
                try {
                    imgHandler = new ManipuladorImagem(pathCompleto);
                } catch (IOException ex) {
                    System.err.println(ex.getMessage());
                }

                ProcImages procImgLocal = ProcImagesFactory.procImageFactoryMethod(imgHandler);                 
                if (descrType != ProcImages.TYPE_DESC_HIST) {
                    if (procImgLocal.calcCaracteristicas())
                    {
                        int indexOfUnderS = nomeArq.indexOf("_");    
                        wekaFile.adicionaRegistro(procImgLocal.getVetCaractString() + 
                                                nomeArq.substring(0, indexOfUnderS));
                    }  
                    else {
                        System.err.println("Erro (Weka): Vetor de características não "
                                            + "calculado!");
                    }                    
                }
                else {
                    if (procImgLocal.calcHistograma())
                    {
                        int indexOfUnderS = nomeArq.indexOf("_");    
                        wekaFile.adicionaRegistro(procImgLocal.getHistogramaString() + 
                                                nomeArq.substring(0, indexOfUnderS));
                    }  
                    else {
                        System.err.println("Erro (Weka): Histograma não "
                                            + "calculado!");
                    }                        
                }

            }
            wekaFile.fechaArquivo();            
            JOptionPane.showMessageDialog(null,
                                          "Arquivo "+ wekaFileName +" gerado com sucesso.",
                                          "Operação finalizada",
                                          JOptionPane.INFORMATION_MESSAGE);   
        }
        else {
            JOptionPane.showMessageDialog(null,
                                          "Arquivo "+ wekaFileName +" já existe.",
                                          "Operação finalizada",
                                          JOptionPane.INFORMATION_MESSAGE);            
        }

        wekaOut.closeFile();        
    }
    
    private void menuGerArqWekaHaralickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGerArqWekaHaralickActionPerformed
        getWekaFile(ProcImages.TYPE_DESC_HARA);
    }//GEN-LAST:event_menuGerArqWekaHaralickActionPerformed

    private void menuGerArqWekaRGBHistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGerArqWekaRGBHistActionPerformed
        getWekaFile(ProcImages.TYPE_DESC_HIST);
    }//GEN-LAST:event_menuGerArqWekaRGBHistActionPerformed

    private void menuGerArqWekaRGBMomentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGerArqWekaRGBMomentActionPerformed
        getWekaFile(ProcImages.TYPE_DESC_MOMEN);
    }//GEN-LAST:event_menuGerArqWekaRGBMomentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new recDadosGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btCancel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFrame fileChooserFrame;
    private javax.swing.JFrame frameResp;
    private javax.swing.ButtonGroup grupoDist;
    private javax.swing.ButtonGroup grupoOptExtrator;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelHist;
    private javax.swing.JLabel labelHist1;
    private javax.swing.JLabel labelImage;
    private javax.swing.JLabel labelImage1;
    private javax.swing.JLabel labelNProx;
    private javax.swing.JList listImages;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem menuAbrirImg;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenu menuCaract;
    private javax.swing.JMenuItem menuExtratCarac;
    private javax.swing.JMenuItem menuGerArqWekaHaralick;
    private javax.swing.JMenuItem menuGerArqWekaRGBHist;
    private javax.swing.JMenuItem menuGerArqWekaRGBMoment;
    private javax.swing.JRadioButton opDescr;
    private javax.swing.JRadioButton opDistEucl;
    private javax.swing.JRadioButton opDistManhatan;
    private javax.swing.JRadioButton opHist;
    private javax.swing.JPanel panelOpDist;
    private javax.swing.JPanel panelOpExtrator;
    private javax.swing.JPanel panelOpNProx;
    private javax.swing.JPanel panelPrincFrameResp;
    private javax.swing.JList resultSetList;
    private javax.swing.JScrollPane scrollPaneImgResp;
    private javax.swing.JScrollPane scrollPanelHist;
    private javax.swing.JScrollPane scrollPanelHist1;
    private javax.swing.JScrollPane scrollPanelImg;
    private javax.swing.JScrollPane scrollPanelImg1;
    private javax.swing.JTabbedPane tabbedPaneVisImgRef;
    private javax.swing.JTabbedPane tabbedPaneVisImgRef1;
    private javax.swing.JTextField txtNImgResp;
    // End of variables declaration//GEN-END:variables
}
